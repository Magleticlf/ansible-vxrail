# coding: utf-8

"""
    VxRail Disk and Cluster Management

    APIs for disk and cluster management  # noqa: E501

    OpenAPI spec version: 7.0.240
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from vxrail_ansible_utility.api_client import ApiClient


class ExpansionLayer3HostApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def private_cluster_layer3_add_host_post(self, body, **kwargs):  # noqa: E501
        """Start a cluster expansion job based on the provided specs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_add_host_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3ExpansionStartSpec body: The specs for layer 3 cluster expansion (required)
        :return: RequestInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_add_host_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_add_host_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_add_host_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Start a cluster expansion job based on the provided specs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_add_host_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3ExpansionStartSpec body: The specs for layer 3 cluster expansion (required)
        :return: RequestInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_add_host_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `private_cluster_layer3_add_host_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/add-host', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_add_proxy_post(self, body, **kwargs):  # noqa: E501
        """Add a proxy node to the VxRail cluster. The proxy node represents a L3 segment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_add_proxy_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body3 body: The management IP that user manually configures on the proxy node. (required)
        :return: list[Model200]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_add_proxy_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_add_proxy_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_add_proxy_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add a proxy node to the VxRail cluster. The proxy node represents a L3 segment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_add_proxy_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body3 body: The management IP that user manually configures on the proxy node. (required)
        :return: list[Model200]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_add_proxy_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `private_cluster_layer3_add_proxy_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/add-proxy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Model200]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_network_topology_get(self, **kwargs):  # noqa: E501
        """Get the network type (DIFF_SUBNET, SAME_SUBNET or UNDECIDED) for different traffics (management, vSAN, vMotion).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_network_topology_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Layer3TrafficNetworkTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_network_topology_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_network_topology_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_network_topology_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get the network type (DIFF_SUBNET, SAME_SUBNET or UNDECIDED) for different traffics (management, vSAN, vMotion).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_network_topology_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Layer3TrafficNetworkTypes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_network_topology_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/network/topology', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layer3TrafficNetworkTypes',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_network_topology_put(self, body, **kwargs):  # noqa: E501
        """Change the network type (DIFF_SUBNET, SAME_SUBNET or UNDECIDED) for different traffics (management, vSAN, vMotion).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_network_topology_put(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterNetworkTypeSpec body: Netmask and gateway for vSAN and vMotion traffic of segment one. (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_network_topology_put_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_network_topology_put_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_network_topology_put_with_http_info(self, body, **kwargs):  # noqa: E501
        """Change the network type (DIFF_SUBNET, SAME_SUBNET or UNDECIDED) for different traffics (management, vSAN, vMotion).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_network_topology_put_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ClusterNetworkTypeSpec body: Netmask and gateway for vSAN and vMotion traffic of segment one. (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_network_topology_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `private_cluster_layer3_network_topology_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/network/topology', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_proxy_node_segment_label_network_get(self, segment_label, **kwargs):  # noqa: E501
        """Get network info of an unconfigured host by ip, insist of netmask, vlanId, gateway and network type topology.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_proxy_node_segment_label_network_get(segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str segment_label: The Ip of the proxy node that the user is filling on add-proxy web. (required)
        :return: ProxyNodeNetworkInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_proxy_node_segment_label_network_get_with_http_info(segment_label, **kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_proxy_node_segment_label_network_get_with_http_info(segment_label, **kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_proxy_node_segment_label_network_get_with_http_info(self, segment_label, **kwargs):  # noqa: E501
        """Get network info of an unconfigured host by ip, insist of netmask, vlanId, gateway and network type topology.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_proxy_node_segment_label_network_get_with_http_info(segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str segment_label: The Ip of the proxy node that the user is filling on add-proxy web. (required)
        :return: ProxyNodeNetworkInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['segment_label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_proxy_node_segment_label_network_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'segment_label' is set
        if ('segment_label' not in params or
                params['segment_label'] is None):
            raise ValueError("Missing the required parameter `segment_label` when calling `private_cluster_layer3_proxy_node_segment_label_network_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'segment_label' in params:
            path_params['segment-label'] = params['segment_label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/proxy-node/{segment-label}/network', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ProxyNodeNetworkInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_segment_label_post(self, body, **kwargs):  # noqa: E501
        """Generate a default segment label for the newly added segment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segment_label_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body2 body: The management IP of the proxy node. (required)
        :return: list[Model200]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_segment_label_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_segment_label_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_segment_label_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate a default segment label for the newly added segment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segment_label_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body2 body: The management IP of the proxy node. (required)
        :return: list[Model200]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_segment_label_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `private_cluster_layer3_segment_label_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/segment-label', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Model200]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_segments_get(self, **kwargs):  # noqa: E501
        """Get a list of Layer 3 segments that are recognized by VxRail Manager. This information is from VxM DB.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_segments_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_segments_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_segments_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of Layer 3 segments that are recognized by VxRail Manager. This information is from VxM DB.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_segments_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/segments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_segments_initial_segment_get(self, **kwargs):  # noqa: E501
        """Information about if initial segment information is needed.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_initial_segment_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Layer3SegmentOneInfoSpec
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_segments_initial_segment_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_segments_initial_segment_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_segments_initial_segment_get_with_http_info(self, **kwargs):  # noqa: E501
        """Information about if initial segment information is needed.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_initial_segment_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Layer3SegmentOneInfoSpec
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_segments_initial_segment_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/segments/initial-segment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layer3SegmentOneInfoSpec',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_segments_initial_segment_post(self, body, **kwargs):  # noqa: E501
        """Provide netmask and gateway for vSAN and vMotion traffic of segment one.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_initial_segment_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3SegmentOneSpec body: Netmask and gateway for vSAN and vMotion traffic of segment one. (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_segments_initial_segment_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_segments_initial_segment_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_segments_initial_segment_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Provide netmask and gateway for vSAN and vMotion traffic of segment one.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_initial_segment_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3SegmentOneSpec body: Netmask and gateway for vSAN and vMotion traffic of segment one. (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_segments_initial_segment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `private_cluster_layer3_segments_initial_segment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/segments/initial-segment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_segments_segment_label_available_hosts_get(self, segment_label, **kwargs):  # noqa: E501
        """Get a list of unconfigured hosts from a specific L3 segment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_segment_label_available_hosts_get(segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str segment_label: The label of the L3 segment that the user chooses. (required)
        :return: list[Layer3VxRailHostSpec]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_segments_segment_label_available_hosts_get_with_http_info(segment_label, **kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_segments_segment_label_available_hosts_get_with_http_info(segment_label, **kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_segments_segment_label_available_hosts_get_with_http_info(self, segment_label, **kwargs):  # noqa: E501
        """Get a list of unconfigured hosts from a specific L3 segment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_segment_label_available_hosts_get_with_http_info(segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str segment_label: The label of the L3 segment that the user chooses. (required)
        :return: list[Layer3VxRailHostSpec]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['segment_label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_segments_segment_label_available_hosts_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'segment_label' is set
        if ('segment_label' not in params or
                params['segment_label'] is None):
            raise ValueError("Missing the required parameter `segment_label` when calling `private_cluster_layer3_segments_segment_label_available_hosts_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'segment_label' in params:
            path_params['segment-label'] = params['segment_label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/segments/{segment-label}/available-hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Layer3VxRailHostSpec]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_segments_segment_label_network_get(self, segment_label, **kwargs):  # noqa: E501
        """Get the existing network configutration for selected L3 segment. Network information like ip pools, subnet mask, gateway, etc. will be given for different traffic types.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_segment_label_network_get(segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str segment_label: The label of the L3 segment that user chooses. (required)
        :return: Layer3NetworkInformationMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_segments_segment_label_network_get_with_http_info(segment_label, **kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_segments_segment_label_network_get_with_http_info(segment_label, **kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_segments_segment_label_network_get_with_http_info(self, segment_label, **kwargs):  # noqa: E501
        """Get the existing network configutration for selected L3 segment. Network information like ip pools, subnet mask, gateway, etc. will be given for different traffic types.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_segment_label_network_get_with_http_info(segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str segment_label: The label of the L3 segment that user chooses. (required)
        :return: Layer3NetworkInformationMap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['segment_label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_segments_segment_label_network_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'segment_label' is set
        if ('segment_label' not in params or
                params['segment_label'] is None):
            raise ValueError("Missing the required parameter `segment_label` when calling `private_cluster_layer3_segments_segment_label_network_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'segment_label' in params:
            path_params['segment-label'] = params['segment_label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/segments/{segment-label}/network', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layer3NetworkInformationMap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_segments_segment_label_network_management_post(self, body, segment_label, **kwargs):  # noqa: E501
        """Provide network information for management network of the new L3 segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_segment_label_network_management_post(body, segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3ManagementNetworkConfigSpec body: The management network information provided (required)
        :param str segment_label: The label of the L3 segment that this management network information is provide for (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_segments_segment_label_network_management_post_with_http_info(body, segment_label, **kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_segments_segment_label_network_management_post_with_http_info(body, segment_label, **kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_segments_segment_label_network_management_post_with_http_info(self, body, segment_label, **kwargs):  # noqa: E501
        """Provide network information for management network of the new L3 segment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_segment_label_network_management_post_with_http_info(body, segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3ManagementNetworkConfigSpec body: The management network information provided (required)
        :param str segment_label: The label of the L3 segment that this management network information is provide for (required)
        :return: Model200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'segment_label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_segments_segment_label_network_management_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `private_cluster_layer3_segments_segment_label_network_management_post`")  # noqa: E501
        # verify the required parameter 'segment_label' is set
        if ('segment_label' not in params or
                params['segment_label'] is None):
            raise ValueError("Missing the required parameter `segment_label` when calling `private_cluster_layer3_segments_segment_label_network_management_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'segment_label' in params:
            path_params['segment-label'] = params['segment_label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/segments/{segment-label}/network/management', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Model200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_segments_segment_label_network_management_preview_post(self, body, segment_label, **kwargs):  # noqa: E501
        """Provide management network information for preview.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_segment_label_network_management_preview_post(body, segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3ManagementNetworkPreviewSpec body: Netmask and gateway for vSAN and vMotion traffic of segment one. (required)
        :param str segment_label: The label of the L3 segment that this management network information is provide for (required)
        :return: Layer3ExpansionPreviewInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_segments_segment_label_network_management_preview_post_with_http_info(body, segment_label, **kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_segments_segment_label_network_management_preview_post_with_http_info(body, segment_label, **kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_segments_segment_label_network_management_preview_post_with_http_info(self, body, segment_label, **kwargs):  # noqa: E501
        """Provide management network information for preview.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_segment_label_network_management_preview_post_with_http_info(body, segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3ManagementNetworkPreviewSpec body: Netmask and gateway for vSAN and vMotion traffic of segment one. (required)
        :param str segment_label: The label of the L3 segment that this management network information is provide for (required)
        :return: Layer3ExpansionPreviewInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'segment_label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_segments_segment_label_network_management_preview_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `private_cluster_layer3_segments_segment_label_network_management_preview_post`")  # noqa: E501
        # verify the required parameter 'segment_label' is set
        if ('segment_label' not in params or
                params['segment_label'] is None):
            raise ValueError("Missing the required parameter `segment_label` when calling `private_cluster_layer3_segments_segment_label_network_management_preview_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'segment_label' in params:
            path_params['segment-label'] = params['segment_label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/segments/{segment-label}/network/management/preview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layer3ExpansionPreviewInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_segments_segment_label_network_vsan_vmotion_preview_post(self, body, segment_label, **kwargs):  # noqa: E501
        """Provide vsan/vmotion network information for preview.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_segment_label_network_vsan_vmotion_preview_post(body, segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3VsanVmotionNetworkPreviewSpec body: Provide vsan/vmotion network information for preview. (required)
        :param str segment_label: The label of the L3 segment that this vsan/vmotion network information is provide for (required)
        :return: Layer3ExpansionPreviewInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_segments_segment_label_network_vsan_vmotion_preview_post_with_http_info(body, segment_label, **kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_segments_segment_label_network_vsan_vmotion_preview_post_with_http_info(body, segment_label, **kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_segments_segment_label_network_vsan_vmotion_preview_post_with_http_info(self, body, segment_label, **kwargs):  # noqa: E501
        """Provide vsan/vmotion network information for preview.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_segment_label_network_vsan_vmotion_preview_post_with_http_info(body, segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3VsanVmotionNetworkPreviewSpec body: Provide vsan/vmotion network information for preview. (required)
        :param str segment_label: The label of the L3 segment that this vsan/vmotion network information is provide for (required)
        :return: Layer3ExpansionPreviewInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'segment_label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_segments_segment_label_network_vsan_vmotion_preview_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `private_cluster_layer3_segments_segment_label_network_vsan_vmotion_preview_post`")  # noqa: E501
        # verify the required parameter 'segment_label' is set
        if ('segment_label' not in params or
                params['segment_label'] is None):
            raise ValueError("Missing the required parameter `segment_label` when calling `private_cluster_layer3_segments_segment_label_network_vsan_vmotion_preview_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'segment_label' in params:
            path_params['segment-label'] = params['segment_label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/segments/{segment-label}/network/vsan_vmotion/preview', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Layer3ExpansionPreviewInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_segments_segment_label_put(self, body, segment_label, **kwargs):  # noqa: E501
        """Change the segment label for the current segment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_segment_label_put(body, segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body4 body: The label of the current segment. (required)
        :param str segment_label: The label of the current segment. (required)
        :return: list[Model200]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_segments_segment_label_put_with_http_info(body, segment_label, **kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_segments_segment_label_put_with_http_info(body, segment_label, **kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_segments_segment_label_put_with_http_info(self, body, segment_label, **kwargs):  # noqa: E501
        """Change the segment label for the current segment.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_segments_segment_label_put_with_http_info(body, segment_label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body4 body: The label of the current segment. (required)
        :param str segment_label: The label of the current segment. (required)
        :return: list[Model200]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'segment_label']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_segments_segment_label_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `private_cluster_layer3_segments_segment_label_put`")  # noqa: E501
        # verify the required parameter 'segment_label' is set
        if ('segment_label' not in params or
                params['segment_label'] is None):
            raise ValueError("Missing the required parameter `segment_label` when calling `private_cluster_layer3_segments_segment_label_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'segment_label' in params:
            path_params['segment-label'] = params['segment_label']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/segments/{segment-label}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Model200]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_cluster_layer3_validate_post(self, body, **kwargs):  # noqa: E501
        """Validate data for Layer 3 cluster expansion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_validate_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3ExpansionValidationRequest body: The specs for layer 3 cluster expansion (required)
        :return: RequestInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_cluster_layer3_validate_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.private_cluster_layer3_validate_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def private_cluster_layer3_validate_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Validate data for Layer 3 cluster expansion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_cluster_layer3_validate_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3ExpansionValidationRequest body: The specs for layer 3 cluster expansion (required)
        :return: RequestInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_cluster_layer3_validate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `private_cluster_layer3_validate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/cluster/layer3/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_v2_cluster_layer3_add_host_post(self, body, **kwargs):  # noqa: E501
        """Start a cluster expansion job based on the provided specs to support two vds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_v2_cluster_layer3_add_host_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3ExpansionStartTwoVDSSpec body: The specs for layer 3 cluster expansion (required)
        :return: RequestInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_v2_cluster_layer3_add_host_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.private_v2_cluster_layer3_add_host_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def private_v2_cluster_layer3_add_host_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Start a cluster expansion job based on the provided specs to support two vds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_v2_cluster_layer3_add_host_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3ExpansionStartTwoVDSSpec body: The specs for layer 3 cluster expansion (required)
        :return: RequestInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_v2_cluster_layer3_add_host_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `private_v2_cluster_layer3_add_host_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/v2/cluster/layer3/add-host', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def private_v2_cluster_layer3_validate_post(self, body, **kwargs):  # noqa: E501
        """Validate data for Layer 3 cluster expansion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_v2_cluster_layer3_validate_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3ExpansionValidationTwoVDSRequest body: The specs for layer 3 cluster expansion (required)
        :return: RequestInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.private_v2_cluster_layer3_validate_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.private_v2_cluster_layer3_validate_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def private_v2_cluster_layer3_validate_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Validate data for Layer 3 cluster expansion  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.private_v2_cluster_layer3_validate_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Layer3ExpansionValidationTwoVDSRequest body: The specs for layer 3 cluster expansion (required)
        :return: RequestInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method private_v2_cluster_layer3_validate_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `private_v2_cluster_layer3_validate_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/private/v2/cluster/layer3/validate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
